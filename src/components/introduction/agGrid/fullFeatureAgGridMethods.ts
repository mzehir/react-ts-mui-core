import { AgGridCompColDef } from '../../custom/agGrid/agGridHelper';

export const fullFeatureAgGridPropsPrepareColumn = (column: AgGridCompColDef): AgGridCompColDef => {
  const result: AgGridCompColDef = {
    field: column.field,
    cellDataType: column.cellDataType,
    hide: column.hide,
    editable: column.editable,

    headerName: column.headerName,
    headerTooltip: column.headerTooltip,

    initialWidth: column.initialWidth,
    width: column.width,
    minWidth: column.minWidth,
    maxWidth: column.maxWidth,
    flex: column.flex,
    initialFlex: column.initialFlex,

    headerValueGetter: column.headerValueGetter,
    headerStyle: column.headerStyle,
    headerClass: column.headerClass,
    suppressHeaderKeyboardEvent: column.suppressHeaderKeyboardEvent,
    columnGroupShow: column.columnGroupShow,
    toolPanelClass: column.toolPanelClass,
    suppressColumnsToolPanel: column.suppressColumnsToolPanel,
    suppressFiltersToolPanel: column.suppressFiltersToolPanel,
    tooltipComponent: column.tooltipComponent,
    tooltipComponentParams: column.tooltipComponentParams,
    pivotKeys: column.pivotKeys,
    cellAriaRole: column.cellAriaRole,
    context: column.context,
    wrapHeaderText: column.wrapHeaderText,
    autoHeaderHeight: column.autoHeaderHeight,
    suppressHeaderContextMenu: column.suppressHeaderContextMenu,

    colId: column.colId,
    type: column.type,
    valueGetter: column.valueGetter,
    valueFormatter: column.valueFormatter,
    refData: column.refData,
    keyCreator: column.keyCreator,
    equals: column.equals,
    tooltipField: column.tooltipField,

    tooltipValueGetter: column.tooltipValueGetter,
    checkboxSelection: column.checkboxSelection,
    showDisabledCheckboxes: column.showDisabledCheckboxes,
    icons: column.icons,
    suppressNavigable: column.suppressNavigable,
    suppressKeyboardEvent: column.suppressKeyboardEvent,
    suppressPaste: column.suppressPaste,
    suppressFillHandle: column.suppressFillHandle,

    initialHide: column.initialHide,
    lockVisible: column.lockVisible,
    lockPosition: column.lockPosition,
    suppressMovable: column.suppressMovable,
    useValueFormatterForExport: column.useValueFormatterForExport,
    valueSetter: column.valueSetter,
    valueParser: column.valueParser,
    cellEditor: column.cellEditor,
    cellEditorParams: column.cellEditorParams,

    cellEditorSelector: column.cellEditorSelector,
    singleClickEdit: column.singleClickEdit,
    cellEditorPopup: column.cellEditorPopup,
    cellEditorPopupPosition: column.cellEditorPopupPosition,
    useValueParserForImport: column.useValueParserForImport,
    onCellValueChanged: column.onCellValueChanged,
    onCellClicked: column.onCellClicked,
    onCellDoubleClicked: column.onCellDoubleClicked,
    onCellContextMenu: column.onCellContextMenu,
    getQuickFilterText: column.getQuickFilterText,

    filterValueGetter: column.filterValueGetter,
    floatingFilter: column.floatingFilter,
    suppressFloatingFilterButton: column.suppressFloatingFilterButton,
    dateComponent: column.dateComponent,
    dateComponentParams: column.dateComponentParams,
    getFindText: column.getFindText,
    headerComponent: column.headerComponent,
    headerComponentParams: column.headerComponentParams,
    menuTabs: column.menuTabs,
    columnChooserParams: column.columnChooserParams,

    suppressHeaderMenuButton: column.suppressHeaderMenuButton,
    suppressHeaderFilterButton: column.suppressHeaderFilterButton,
    mainMenuItems: column.mainMenuItems,
    contextMenuItems: column.contextMenuItems,
    headerCheckboxSelection: column.headerCheckboxSelection,
    headerCheckboxSelectionFilteredOnly: column.headerCheckboxSelectionFilteredOnly,
    headerCheckboxSelectionCurrentPageOnly: column.headerCheckboxSelectionCurrentPageOnly,
    chartDataType: column.chartDataType,
    pinned: column.pinned,
    initialPinned: column.initialPinned,

    lockPinned: column.lockPinned,
    pivot: column.pivot,
    initialPivot: column.initialPivot,
    pivotIndex: column.pivotIndex,
    initialPivotIndex: column.initialPivotIndex,
    pivotComparator: column.pivotComparator,
    enablePivot: column.enablePivot,
    cellStyle: column.cellStyle,
    cellClass: column.cellClass,
    cellClassRules: column.cellClassRules,

    cellRenderer: column.cellRenderer,
    cellRendererParams: column.cellRendererParams,
    cellRendererSelector: column.cellRendererSelector,
    loadingCellRenderer: column.loadingCellRenderer,
    loadingCellRendererParams: column.loadingCellRendererParams,
    loadingCellRendererSelector: column.loadingCellRendererSelector,
    autoHeight: column.autoHeight,
    wrapText: column.wrapText,
    enableCellChangeFlash: column.enableCellChangeFlash,
    rowDrag: column.rowDrag,

    rowDragText: column.rowDragText,
    dndSource: column.dndSource,
    dndSourceOnRowDrag: column.dndSourceOnRowDrag,
    rowGroup: column.rowGroup,
    initialRowGroup: column.initialRowGroup,
    rowGroupIndex: column.rowGroupIndex,
    initialRowGroupIndex: column.initialRowGroupIndex,
    enableRowGroup: column.enableRowGroup,
    enableValue: column.enableValue,
    aggFunc: column.aggFunc,

    initialAggFunc: column.initialAggFunc,
    defaultAggFunc: column.defaultAggFunc,
    allowedAggFuncs: column.allowedAggFuncs,
    showRowGroup: column.showRowGroup,
    sortable: column.sortable,
    sort: column.sort,
    initialSort: column.initialSort,
    sortIndex: column.sortIndex,
    initialSortIndex: column.initialSortIndex,
    sortingOrder: column.sortingOrder,

    comparator: column.comparator,
    unSortIcon: column.unSortIcon,
    colSpan: column.colSpan,
    rowSpan: column.rowSpan,
    spanRows: column.spanRows,

    resizable: column.resizable,
    suppressSizeToFit: column.suppressSizeToFit,
    suppressAutoSize: column.suppressAutoSize,
    pivotValueColumn: column.pivotValueColumn,
    pivotTotalColumnIds: column.pivotTotalColumnIds,
    suppressSpanHeaderHeight: column.suppressSpanHeaderHeight,

    // Custom Ones
    isTranslation: column.isTranslation,
  };

  return result;
};
